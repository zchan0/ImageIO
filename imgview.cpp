//
// Program function:
// - Read & Write image file 
// - Reshape image when window size changed
// 
// Reuse:
// - Encapsulate a class ImageIO to implement above functions
// - For other program, just import ImageIO.h, and create object of ImageIO, like imageIO, done, call load or export need
//
// Usage:
// - imgview (image file name) 
// 
// author: Cc 9/6/2016
// 

#ifdef __APPLE__
#  pragma clang diagnostic ignored "-Wdeprecated-declarations"
#  include <GLUT/glut.h>
#else
#  include <GL/glut.h>
#endif

#include <cstdlib>
#include <iostream>

#include "ImageIO.h"

static const char EscKey   = 27;

static ImageIO imageIO = ImageIO();

/********* helpers **********/

char* getFileNameFromCommandLine(int argc, char* argv[]) {
  switch (argc) {
  case 1:
    return 0;
  case 2:
    return argv[1]; 
  default:
      std::cerr << "Usage: imgview imageFileName[.extension]" << std:: endl;
      exit(1);
    break;
  }
}

void promptInstructions() {
  std::cout << "* ================================================== *" << std::endl;
  std::cout << "* ===================  Keyboard  =================== *" << std::endl;
  std::cout << "* ================================================== *" << std::endl;
  std::cout << "              r/R - read  image file                  " << std::endl;
  std::cout << "              w/W - write image file                  " << std::endl;
  std::cout << "              q/Q/ESC - quit                          " << std::endl;
  std::cout << "* ================================================== *" << std::endl;
}

void display() {
  imageIO.drawImage();
}

/********* handle keyboard  **********/

void readImageFile() {
  std::string fileName;
  std::cout << "Enter image file name to read: ";
  std::cin  >> fileName;
  imageIO.loadImage(fileName);
  imageIO.drawImage();
}

void writeImageFile() {
  std::string fileName;
  std::cout << "Enter output image file name: ";
  std::cin  >> fileName;
  imageIO.saveImage(fileName);
}

/* key  1- ASCII character generated by pressing
   x, y - mouse location in window
*/
void handleKeyboard(unsigned char key, int x, int y) {
  switch(key) {
    case 'r': case 'R': readImageFile();   break;
    case 'w': case 'W': writeImageFile();  break;
    case 'q': case 'Q': case EscKey: exit(0); break;
  }
}

/********* handle reshape  **********/

void handleReshape(int width, int height) {
  glViewport(0, 0, width, height);

  glMatrixMode(GL_PROJECTION);
	// Clear the projection matrix 
	glLoadIdentity();
  gluOrtho2D(0,  width, 0, height);
	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char* argv[]) {

  glutInit(&argc, argv);

  char* fileName = getFileNameFromCommandLine(argc, argv);
  if (fileName != NULL) {
    imageIO.loadImage(fileName);
  } 

  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
  glutInitWindowSize(imageIO.image.getWidth(), imageIO.image.getHeight());
  glutCreateWindow("Get the Picture");

  glutDisplayFunc(display);
  glutKeyboardFunc(handleKeyboard);
  glutReshapeFunc(handleReshape);

  promptInstructions();

  glutMainLoop();

  return 0;
} 
